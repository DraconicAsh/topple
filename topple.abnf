ident = ("_" / ALPHA) *("_" / ALPHA / DIGIT)
string = %x22 *(CHAR / %x00) %x22
literal = 1*DIGIT / string / ident
table = expr *("," *WSP literal)
literal =/ "[" table "]"

index = literal / ident "." ident / ident "[" expr "]"
call = index / (ident / index) "(" table ")"

bit-not = call / "!" call

mult = bit-not / bit_not "*" mult
div = mult / mult "/" div
mod = div / div "%" mod
add = mod / mod "+" add
sub = add / add "-" sub

bit-and = sub / sub "&" bit_and
bit-or = bit_and / bit_and "|" bit_or
bit-xor = bit_or / bit_or "^" bit_xor

shift-left = bit_xor / but_xor "<<" shift_left
shift-right = shift_left / shift_left ">>" shift_right

pop = shift-right / shift_right "--"
push = pop / pop "++" push

gt = push / push ">" gt
lt = gt / gt "<" lt
gte = lt / lt ">=" gte
lte = gte / gte "<=" lte
eq = lte / lte "==" eq
ne = eq / eq "!=" ne

expr = assign
assign = (ident / index) "=" expr / ne
literal =/ "(" expr ")"

def = %s"let" 1*WSP (ident / index / assign)
literal =/ def

block = "{" *(expr ";") "}"
literal =/ block

iter = %s"for" 1*WSP literal (ident / block)
literal =/ block
